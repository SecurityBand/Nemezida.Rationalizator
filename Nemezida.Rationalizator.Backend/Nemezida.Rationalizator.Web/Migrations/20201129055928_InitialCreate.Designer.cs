// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nemezida.Rationalizator.Web.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Nemezida.Rationalizator.Web.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20201129055928_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ArticleEntityArticleTagEntity", b =>
                {
                    b.Property<long>("ArticlesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleEntityArticleTagEntity");
                });

            modelBuilder.Entity("IdeaEntityIdeaTagEntity", b =>
                {
                    b.Property<long>("IdeasId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("IdeasId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("IdeaEntityIdeaTagEntity");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PreviewText")
                        .HasColumnType("text");

                    b.Property<int>("Raiting")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleTagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CommentaryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Commentaries");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.FieldEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("FieldTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Tooltip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.FieldTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("AloowMultiselect")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnum")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonSchema")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.FieldValueEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RationalOfferEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RationalOfferEntityId");

                    b.ToTable("FieldValues");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Raiting")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaTagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdeaTags");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.NewsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.PersistentStorageFileInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("ArticleEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentaryEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<long?>("IdeaEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long?>("RationalOfferEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleEntityId");

                    b.HasIndex("CommentaryEntityId");

                    b.HasIndex("IdeaEntityId");

                    b.HasIndex("RationalOfferEntityId");

                    b.ToTable("PersistentStorageFileInfos");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Raiting")
                        .HasColumnType("integer");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("RationalOffers");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferTagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RationalOfferTags");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.StatusEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text");

                    b.Property<string>("FontColor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.StatusHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("NewStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("RationalOfferId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("RationalOfferId");

                    b.ToTable("StatusHistories");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.StatusTransitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("CommentRequired")
                        .HasColumnType("boolean");

                    b.Property<long>("CurrentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("NextStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("NextStatusId");

                    b.ToTable("StatusTransitions");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long>("PhotoId")
                        .HasColumnType("bigint");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RationalOfferEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("RankId");

                    b.HasIndex("RationalOfferEntityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.UserRankEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ApproveCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRanks");
                });

            modelBuilder.Entity("RationalOfferEntityRationalOfferTagEntity", b =>
                {
                    b.Property<long>("RationalOffersId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("RationalOffersId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("RationalOfferEntityRationalOfferTagEntity");
                });

            modelBuilder.Entity("ArticleEntityArticleTagEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleEntity", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleTagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdeaEntityIdeaTagEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaEntity", null)
                        .WithMany()
                        .HasForeignKey("IdeasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaTagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CategoryEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.CategoryEntity", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CommentaryEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.UserEntity", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.CommentaryEntity", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.FieldEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.FieldTypeEntity", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.FieldValueEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.FieldEntity", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", null)
                        .WithMany("FieldValues")
                        .HasForeignKey("RationalOfferEntityId");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.PersistentStorageFileInfoEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("ArticleEntityId");

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.CommentaryEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("CommentaryEntityId");

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("IdeaEntityId");

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("RationalOfferEntityId");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.StatusHistoryEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.StatusEntity", "NewStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", "RationalOffer")
                        .WithMany("StatusHistory")
                        .HasForeignKey("RationalOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewStatus");

                    b.Navigation("RationalOffer");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.StatusTransitionEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.StatusEntity", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.StatusEntity", "NextStatus")
                        .WithMany()
                        .HasForeignKey("NextStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentStatus");

                    b.Navigation("NextStatus");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.UserEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.PersistentStorageFileInfoEntity", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.UserRankEntity", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", null)
                        .WithMany("Autors")
                        .HasForeignKey("RationalOfferEntityId");

                    b.Navigation("Photo");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("RationalOfferEntityRationalOfferTagEntity", b =>
                {
                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", null)
                        .WithMany()
                        .HasForeignKey("RationalOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferTagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.ArticleEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CategoryEntity", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.CommentaryEntity", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.IdeaEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Nemezida.Rationalizator.Web.DataAccess.Models.RationalOfferEntity", b =>
                {
                    b.Navigation("Autors");

                    b.Navigation("FieldValues");

                    b.Navigation("Files");

                    b.Navigation("StatusHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
